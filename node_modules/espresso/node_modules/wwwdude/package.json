{
  "name": "wwwdude",
  "description": "Simple to use HTTP library on top of the built in libs of node.js",
  "tags": [
    "http",
    "simple",
    "util",
    "rest",
    "utility"
  ],
  "version": "0.1.3",
  "author": {
    "name": "Sven Pfleiderer",
    "email": "sven@roothausen.de"
  },
  "directories": {
    "lib": "lib"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/4z3/node-wwwdude.git"
  },
  "bugs": {
    "url": "http://github.com/4z3/node-wwwdude/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/pfleidi/node-wwwdude/raw/master/LICENSE"
    }
  ],
  "dependencies": {},
  "engines": {
    "node": ">= 0.2.0"
  },
  "main": "index",
  "readme": "wwwdude\n============\n\nwwwdude is a small and flexible http client library on top of node's [http.request](http://nodejs.org/docs/v0.4.7/api/http.html#http.request).\n\nSupported HTTP verbs\n--------------------\n\n* GET\n* PUT\n* POST\n* DELETE\n* HEAD\n\nFeatures\n--------\n\n* Support for Node 0.2.x AND 0.4.x\n* Very customizable (custom headers on client/request basis ...)\n* Automatic redirect following\n* Automatic gzip decode support \n* Automatic support for HTTPS (node 0.4.x only)\n* Flexible handling of responses with event emitters\n\nInstallation\n------------\n\nYou can install install wwwdude via npm:\n\n    npm install wwwdude\n\nUsage\n-----\n\nA working example:\n\n    var sys = require('sys'),\n    wwwdude = require('wwwdude');\n\n    var client = wwwdude.createClient({\n        headers: { 'User-Agent': 'wwwdude test 42' },\n        gzip: true\n      });\n\n    client.get('http://google.com/')\n      .addListener('error', function (err) {\n          sys.puts('Network Error: ' + sys.inspect(err));\n        })\n      .addListener('http-error', function (data, resp) {\n          sys.puts('HTTP Error for: ' + resp.host + ' code: ' + resp.statusCode);\n        })\n      .addListener('redirect', function (data, resp) {\n          sys.puts('Redirecting to: ' + resp.headers['location']);\n          sys.puts('Headers: ' + sys.inspect(resp.headers));\n        })\n      .addListener('success', function (data, resp) {\n          sys.debug('Got data: ' + data);\n          sys.puts('Headers: ' + sys.inspect(resp.headers));\n        });\n\nTransparent Content Parsing\n----------------------------\n\nwwwdude supports transparent parsing of retrieved content. Parsers for XML and JSON are already included. Just add a contentParser property to the options hash when creating a new client:\n\n    var client = wwwdude.createClient({\n        contentParser: wwwdude.parsers.json\n    });\n\n    client.get('http://some.url/content.json').on('success', function (data, response) {\n      sys.puts('data: ' + sys.inspect(data));\n      sys.puts('String content: ' + response.rawData);\n    });\n\n\nRetrieved content will now be returned as a JavaScript object instead of a string. A string representation can still be found in response.rawData.\n\n\n### Creating own content parsers\n\nIt is also possible to create own content parsers. An example fuch such a parser would be:\n\n    function parser(content, callback) {\n      asyncParseOperation(function (error, result) {\n        if (error) {\n          callback(error);\n        } else {\n          callback(null, result);\n        }\n      });\n    }\n\n    var client = wwwdude.createClient({\n        contentParser: parser\n    });\n\nAPI\n---\n\n### wwwdude.createClient([options])\n\nCreates a new client object with predefined options for each request made with this instance.\n\n#### options hash\n\n* _encoding_ content encoding. e.g. binary or utf8. Default is utf8. \n* _followRedirect_ boolean value which enables/disables automatic redirect following. Default is true.\n* _gzip_ boolean value which enables/disables gzip compression\n* _headers_ a hash with the headers you want to use for each request.\n* _contentParser_ a callback driven content parser e.g. wwwdude.parsers.json.\n\nThe createClient call returns a Request object. On this object you can call a method for each supported HTTP verb.\n\n### client.get(url [, requestOptions])\n\nCreates a HTTP GET request\n\n### client.put(url [, requestOptions])\n\nCreates a HTTP PUT request\n\n### client.post(url, [, requestOptions])\n\nCreates a HTTP POST request\n\n### client.delete(url[, requestOptions])\n\nCreates a HTTP DELETE request\n\n### client.head(url [, requestOptions)]\n\nCreates a HTTP HEAD request\n\n### requestOptions hash\n\n* _headers_ see customHeaders\n* _payload_ content to transmit with PUT or POST request\n\n### customHeaders hash\n\nThe customHeaders hash contains a set of HTTP headers which should be added to a request. They are optional. A working example would be:\n\n    customHeaders = { 'User-Agent': 'Foo', 'Accept': 'text/html', 'Content-Type': 'application/json' };\n\n### Listeners\n\nEvery request call returns a Request object that emits events. You can add listeners for all those events.\n\n* _complete_ emitted when the request has finished. It doesn't matter if it was successful or not.\n* _success_ emitted when the request was successful (HTTP code 200).\n* _error_ emitted when the request was unsuccessful. This will occur if a network error (tcp, dns, ...) happened.\n* _http-error_ emitted when a HTTP status code > 400 was detected.\n* _http-client-error_ emitted when a HTTP status code between 400 and 500 was detected.\n* _http-server-error_ emitted when a HTTP status code > 500 was detected.\n* _redirect_ emitted when a redirect occurred. \n* _2XX, 3XX, 4XX, 5XX etc_ emitted for every request with a response code of the same status class.\n* _actual response code_ emitted for every response with a matching response code. E.g. 200, 301, 404 ...\n* _actual human readable response code_ emitted for every response with a matching readable response. E.g. 'not-found', 'bad-request', 'forbidden' ...\n\n#### Human readable response codes\n\n* _200_ 'ok'\n* _201_ 'created'\n* _202_ 'accepted'\n* _203_ 'non-authorative-information'\n* _204_ 'no-content'\n* _205_ 'reset-content'\n* _207_ 'partial-content'\n* _300_ 'multiple-choices'\n* _301_ 'moved-permanently'\n* _302_ 'found'\n* _303_ 'see-other'\n* _304_ 'not-modified'\n* _305_ 'use-proxy'\n* _307_ 'temporary-redirect'\n* _400_ 'bad-request'\n* _401_ 'unauthorized'\n* _402_ 'payment-required'\n* _403_ 'forbidden'\n* _404_ 'not-found'\n* _405_ 'method-not-allowed'\n* _406_ 'not-acceptable'\n* _407_ 'proxy-authentication-required'\n* _408_ 'request-timeout'\n* _409_ 'conflict'\n* _410_ 'gone'\n* _411_ 'length-required'\n* _412_ 'precondition-failed'\n* _413_ 'request-entity-too-large'\n* _414_ 'request-uri-too-long'\n* _415_ 'unsupported-media-type'\n* _416_ 'request-range-not-satisfiable'\n* _417_ 'expectation-failed'\n* _500_ 'internal-server-error'\n* _501_ 'not-implemented'\n* _502_ 'bad-gateway'\n* _503_ 'service-unavailable'\n* _504_ 'gateway-timeout'\n* _505_ 'http-version-not-supported'\n\nTo register for an event, you can use the addListener() method.\n\n    request.addListener(event, function (data, response) { doSomeThing(); });\n\nThere is also a shorter alternative method called on():\n\n    request.on(event, function (data, response) { doSomeThing(); });\n\nThe passed callback function takes two parameters: data and response. Data contains the content returned from the server.\n\n### request.send()\n\nThe send() call has been removed. Please don't use it!\n\nTests\n-----\n\nTo run the unit tests, expresso, semver and connect are required. You can install it via npm:\n\n    npm install xml2js-expat expresso connect semver\n\nThere's a Makefile to run the tests:\n\n    make test\n\nTODO:\n-----\n\n* More configurable redirect following (set max. redirect count)\n* Multipart HTTP Uploads\n* setting custom timeout values\n\nLicense\n-------\n\nwwwdude is licensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "wwwdude@0.1.3",
  "dist": {
    "shasum": "52f26ecf386e2b69842c3e71c92bab546b846735"
  },
  "_from": "https://github.com/4z3/node-wwwdude/tarball/0.1.4",
  "_resolved": "https://github.com/4z3/node-wwwdude/tarball/0.1.4"
}
